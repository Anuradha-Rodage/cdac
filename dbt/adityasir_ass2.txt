 ALTER TABLE Trains add PRIMARY KEY (TrainID);
 alter table routes add primary key(routeid);
 alter table passengers add primary key(passengerid);
 alter table booking add primary key(bookingid);
alter table schedules add foreign key(trainid) references trains(trainid);
 alter table schedules add foreign key(routeid) references routes(routeid);


que1:1. Query 1: Write a query to retrieve the train name, route details, and schedule for all trains using an 
INNER JOIN between the Trains, Routes, and Schedules tables. 
 select t.trainname,r.startstation,r.endstation,r.distance,s.departuretime,s.arrivaltime from schedules s inner join trains t on s.trainid=t.trainid inner join routes r on s.routeid=r.routeid;
+------------------+--------------+------------+----------+---------------------+---------------------+
| trainname        | startstation | endstation | distance | departuretime       | arrivaltime         |
+------------------+--------------+------------+----------+---------------------+---------------------+
| rajdhani express | Delhi        | Mumbai     |     1400 | 2024-10-20 09:00:00 | 2024-10-20 21:00:00 |
| duronto          | Delhi        | Mumbai     |     1400 | 2024-10-23 10:00:00 | 2024-10-23 22:00:00 |
| tejas express    | Kolkata      | Chennai    |     1650 | 2024-10-21 08:30:00 | 2024-10-21 22:00:00 |
| garib            | Kolkata      | Chennai    |     1650 | 2024-10-24 07:00:00 | 2024-10-24 21:00:00 |
| shatabdi         | Jaipur       | Ahmedabad  |      650 | 2024-10-22 06:00:00 | 2024-10-22 14:00:00 |
+------------------+--------------+------------+----------+---------------------+---------------------+

2. Query 2: Write a query to retrieve all trains that don't have any bookings using a LEFT JOIN between 
the Trains and Bookings tables. 
 select t.trainid,t.trainname from trains t left join schedules s on t.trainid=s.trainid left join booking b on s.scheduleid=b.scheduleid
    -> where b.bookingid is null;
+---------+-----------+
| trainid | trainname |
+---------+-----------+
|       5 | garib     |
+---------+-----------+
query 3: Write a query to find all passengers who have booked seats for trains traveling a distance of 
more than 500 km using a RIGHT JOIN and subquery. 
 select p.passengerid,p.firstname,p.lastname from passengers p right join booking b on p.passengerid=b.passengerid
    -> where
    -> b.scheduleid in(select s.scheduleid from schedules s inner join routes r on s.routeid = r.routeid
    -> where r.distance >500);
+-------------+-----------+----------+
| passengerid | firstname | lastname |
+-------------+-----------+----------+
|           1 | Rajesh    | Sharma   |
|           2 | Priya     | Mehra    |
|           5 | Arun      | Patel    |
|           3 | Ankit     | Verma    |
|           4 | Kavita    | Gupta    |
+-------------+-----------+----------+
4. Query 4: Write a query to list all train schedules, even if there are no passengers booked, using an 
OUTER JOIN



 SELECT     s.ScheduleID,    s.TrainID,    s.RouteID,    s.DepartureTime,    s.ArrivalTime,    b.BookingID,    b.PassengerID,    b.SeatNumber FROM     Schedules s LEFT JOIN     Booking b ON s.ScheduleID = b.ScheduleID;
+------------+---------+---------+---------------------+---------------------+-----------+-------------+------------+
| ScheduleID | TrainID | RouteID | DepartureTime       | ArrivalTime         | BookingID | PassengerID | SeatNumber |
+------------+---------+---------+---------------------+---------------------+-----------+-------------+------------+
|          1 |       1 |       1 | 2024-10-20 09:00:00 | 2024-10-20 21:00:00 |         1 |           1 |         12 |
|          1 |       1 |       1 | 2024-10-20 09:00:00 | 2024-10-20 21:00:00 |         2 |           2 |         34 |
|          2 |       2 |       2 | 2024-10-21 08:30:00 | 2024-10-21 22:00:00 |         3 |           3 |         56 |
|          3 |       3 |       3 | 2024-10-22 06:00:00 | 2024-10-22 14:00:00 |         4 |           4 |         18 |
|          4 |       4 |       1 | 2024-10-23 10:00:00 | 2024-10-23 22:00:00 |         5 |           5 |         22 |
|          5 |       5 |       2 | 2024-10-24 07:00:00 | 2024-10-24 21:00:00 |      NULL |        NULL |       NULL |
+------------+---------+---------+---------------------+-------------
Query 5: Write a query to calculate the total number of passengers for each train route.
 SELECT     r.RouteID,    r.StartStation,    r.EndStation,    (SELECT COUNT(b.PassengerID)      FROM Booking b     JOIN Schedules s ON b.ScheduleID = s.ScheduleID     WHERE s.RouteID = r.RouteID) AS TotalPassengers FROM     Routes r;
+---------+--------------+------------+-----------------+
| RouteID | StartStation | EndStation | TotalPassengers |
+---------+--------------+------------+-----------------+
|       1 | Delhi        | Mumbai     |               3 |
|       2 | Kolkata      | Chennai    |               1 |
|       3 | Jaipur       | Ahmedabad  |               1 |
+---------+--------------+------------+-----------------+
query6:
 SELECT     AVG(passenger_count) AS AveragePassengersPerTrain FROM (SELECT s.TrainID,COUNT(b.PassengerID) AS passenger_count FROM Schedules s LEFT JOIN Booking b ON s.ScheduleID = b.ScheduleID GROUP BY s.TrainID) AS TrainPassengerCounts;
+---------------------------+
| AveragePassengersPerTrain |
+---------------------------+
|                    1.0000 |
+---------------------------+
1 row in set (0.01 sec)
  delimiter //
que 6:2
mysql>  create function calculatetraveltime(deparutetime datetime,arrivaltime datetime)
    ->    returns decimal(10,2)
    ->  deterministic
    ->  begin
    ->     declare travel_time decimal(10,2);
    ->     set  travel_time = timestampdiff(minute,deparutetime,arrivaltime) / 60;
    ->     return travel_time;
    ->  end; //


 delimiter ;
mysql> SELECT CalculateTravelTime((SELECT DepartureTime FROM Schedules WHERE ScheduleID = 1),(SELECT ArrivalTime FROM Schedules WHERE ScheduleID = 1)) AS TravelTimeInHours;
+-------------------+
| TravelTimeInHours |
+-------------------+
|             12.00 |
+-------------------+
que 6:1
 delimiter //
mysql> create procedure updateavailableseats(in bookingtrainid int,in numberofseatsbooked int)
    -> begin
    ->    update trains
    ->    set totalseats = totalseats - numberofseatsbooked
    ->    where trainid = bookingtrainid;
    ->    if row_count()>0 then
    ->       select concat('Available seats updated for TrainID: ', bookingtrainid)as status;
    ->    else
    ->      select 'No update made, check TrainID or seats availability.' AS Status;
    ->    end if;
    -> end; //
 CALL UpdateAvailableSeats(1, 5);
+----------------------------------------+
| status                                 |
+----------------------------------------+
| Available seats updated for TrainID: 1 |
+----------------------------------------+
 que 7:1
> CREATE VIEW PassengerBookingsView AS SELECT     p.PassengerID,    p.FirstName,    p.LastName,    p.Age,    p.Email,    b.BookingID,    b.BookingDate,    b.SeatNumber,    t.TrainID,    t.TrainName,    t.TrainType,    t.TotalSeats,    s.ScheduleID,    s.DepartureTime,    s.ArrivalTime,    r.StartStation,    r.EndStation,    r.Distance FROM Passengers p JOIN Booking b ON p.PassengerID = b.PassengerID JOIN Schedules s ON b.ScheduleID = s.ScheduleID JOIN Trains t ON s.TrainID = t.TrainID JOIN Routes r ON s.RouteID = r.RouteID;
Query OK, 0 rows affected (0.03 sec)

mysql> select * from paseengerbookingsview;
ERROR 1146 (42S02): Table 'railwaymnagementdb.paseengerbookingsview' doesn't exist
mysql> select * from passengerbookingsview;
+-------------+-----------+----------+------+--------------------------------+-----------+-------------+------------+---------+------------------+-----------+------------+------------+---------------------+---------------------+--------------+------------+----------+
| PassengerID | FirstName | LastName | Age  | Email                          | BookingID | BookingDate | SeatNumber | TrainID | TrainName        | TrainType | TotalSeats | ScheduleID | DepartureTime       | ArrivalTime         | StartStation | EndStation | Distance |
+-------------+-----------+----------+------+--------------------------------+-----------+-------------+------------+---------+------------------+-----------+------------+------------+---------------------+---------------------+--------------+------------+----------+
|           1 | Rajesh    | Sharma   |   45 | rajesh.sharma@specialforce.com |         1 | 2024-10-10  |         12 |       1 | rajdhani express | express   |        293 |          1 | 2024-10-20 09:00:00 | 2024-10-20 21:00:00 | Delhi        | Mumbai     |     1400 |
|           2 | Priya     | Mehra    |   32 | priya.mehra@specialforce.com   |         2 | 2024-10-11  |         34 |       1 | rajdhani express | express   |        293 |          1 | 2024-10-20 09:00:00 | 2024-10-20 21:00:00 | Delhi        | Mumbai     |     1400 |
|           3 | Ankit     | Verma    |   29 | ankit.verma@specialforce.com   |         3 | 2024-10-12  |         56 |       2 | tejas express    | superfast |        200 |          2 | 2024-10-21 08:30:00 | 2024-10-21 22:00:00 | Kolkata      | Chennai    |     1650 |
|           4 | Kavita    | Gupta    |   40 | kavita.gupta@specialforce.com  |         4 | 2024-10-13  |         18 |       3 | shatabdi         | passenger |        250 |          3 | 2024-10-22 06:00:00 | 2024-10-22 14:00:00 | Jaipur       | Ahmedabad  |      650 |
|           5 | Arun      | Patel    |   50 | arun.patel@specialforce.com    |         5 | 2024-10-14  |         22 |       4 | duronto          | superfast |        150 |          4 | 2024-10-23 10:00:00 | 2024-10-23 22:00:00 | Delhi        | Mumbai     |     1400 |
+-------------+-----------+----------+------+--------------------------------+-----------+-------------+------------+---------+------------------+-----------+------------+------------+---------------------+---------------------+--------------+------------+----------+


que 7:2 CREATE INDEX idx_bookingdate ON Booking (BookingDate);
 SELECT * FROM Booking WHERE BookingDate = '2024-10-12';
+-----------+-------------+------------+-------------+------------+
| BookingID | PassengerID | ScheduleID | BookingDate | SeatNumber |
+-----------+-------------+------------+-------------+------------+
|         3 |           3 |          2 | 2024-10-12  |         56 |
+-----------+-------------+------------+-------------+-

que8:
 CREATE TEMPORARY TABLE TempTrainSchedules AS SELECT * FROM Schedules WHERE DATE(DepartureTime) = '2023-10-15';
Query OK, 0 rows affected (0.01 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM TempTrainSchedules;
Empty set (0.00 sec)


que 11: trigger
1. Create a Trigger that automatically assigns a seat number to passengers when a booking is created.
mysql> CREATE TRIGGER AssignSeatNumberBeforeBookings
    -> BEFORE INSERT ON Booking
    -> FOR EACH ROW
    -> begin
    ->   DECLARE max_seat INT;
    ->   SELECT IFNULL(MAX(SeatNumber), 0) INTO max_seat
    ->   FROM Booking
    ->   WHERE ScheduleID = NEW.ScheduleID;
    ->   SET NEW.SeatNumber = max_seat + 1;
    -> end; //
mysql> ALTER TABLE Booking MODIFY BookingID INT AUTO_INCREMENT ;
mysql> INSERT INTO Booking(PassengerID, ScheduleID, BookingDate)VALUES (1, 1, '2024-10-10');
Query OK, 1 row affected (0.01 sec)

mysql> select * from booking;
+-----------+-------------+------------+-------------+------------+
| BookingID | PassengerID | ScheduleID | BookingDate | SeatNumber |
+-----------+-------------+------------+-------------+------------+
|         1 |           1 |          1 | 2024-10-10  |         12 |
|         2 |           2 |          1 | 2024-10-11  |         34 |
|         3 |           3 |          2 | 2024-10-12  |         56 |
|         4 |           4 |          3 | 2024-10-13  |         18 |
|         5 |           5 |          4 | 2024-10-14  |         22 |
|         6 |           1 |          1 | 2024-10-10  |         35 |
+-----------+-------------+------------+-------------+------------+
6 rows in set (0.00 sec)
que 12:1
1. Write a query to combine the results of two queries that return passengers booked on trains for two 
different routes. 
mysql> SELECT p.PassengerID, p.FirstName, p.LastName, r.StartStation, r.EndStation FROM Passengers p JOIN Booking b ON p.PassengerID = b.PassengerID JOIN Schedules s ON b.ScheduleID = s.ScheduleID JOIN Routes r ON s.RouteID = r.RouteID WHERE r.RouteID = 1
    -> union
    -> SELECT p.PassengerID, p.FirstName, p.LastName, r.StartStation, r.EndStation FROM Passengers p JOIN Booking b ON p.PassengerID = b.PassengerID JOIN Schedules s ON b.ScheduleID = s.ScheduleID JOIN Routes r ON s.RouteID = r.RouteID WHERE r.RouteID = 2;
+-------------+-----------+----------+--------------+------------+
| PassengerID | FirstName | LastName | StartStation | EndStation |
+-------------+-----------+----------+--------------+------------+
|           1 | Rajesh    | Sharma   | Delhi        | Mumbai     |
|           2 | Priya     | Mehra    | Delhi        | Mumbai     |
|           5 | Arun      | Patel    | Delhi        | Mumbai     |
|           3 | Ankit     | Verma    | Kolkata      | Chennai    |
+-------------+-----------+----------+--------------+------------+
4 rows in set (0.01 sec)
que12:2
mysql> SELECT     BookingID,    PassengerID,    ScheduleID,    BookingDate FROM     Booking WHERE     BookingDate = '2024-10-10'
    -> union all
    -> SELECT     BookingID,    PassengerID,    ScheduleID,    BookingDate FROM     Booking WHERE     BookingDate = '2024-10-11'
    -> union all
    -> SELECT     BookingID,    PassengerID,    ScheduleID,    BookingDate FROM     Booking WHERE     BookingDate = '2024-10-12';
+-----------+-------------+------------+-------------+
| BookingID | PassengerID | ScheduleID | BookingDate |
+-----------+-------------+------------+-------------+
|         1 |           1 |          1 | 2024-10-10  |
|         6 |           1 |          1 | 2024-10-10  |
|         2 |           2 |          1 | 2024-10-11  |
|         3 |           3 |          2 | 2024-10-12  |
+-----------+-------------+------------+-------------+
4 rows in set (0.00 sec)
que:13 copy structure of table
 CREATE TABLE OldPassengers LIKE Passengers;
Query OK, 0 rows affected (0.03 sec)

mysql> describe oldpassengers;
+-------------+-------------+------+-----+---------+-------+
| Field       | Type        | Null | Key | Default | Extra |
+-------------+-------------+------+-----+---------+-------+
| PassengerID | int         | NO   | PRI | NULL    |       |
| FirstName   | varchar(25) | YES  |     | NULL    |       |
| LastName    | varchar(25) | YES  |     | NULL    |       |
| Age         | int         | YES  |     | NULL    |       |
| Email       | varchar(30) | YES  |     | NULL    |       |
+-------------+-------------+------+-----+---------+-------+
5 rows in set (0.01 sec

